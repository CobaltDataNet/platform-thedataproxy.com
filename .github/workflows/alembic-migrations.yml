name: Alembic Migrations

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'app/models/**'
      - 'alembic.ini'
      - 'alembic/**'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_call:

jobs:
  alembic-migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV

      - name: Debug file presence
        run: |
          ls -la
          pwd
          if [ ! -f pyproject.toml ]; then echo "pyproject.toml not found"; exit 1; fi
          if [ ! -f uv.lock ]; then echo "uv.lock not found"; fi
          if [ ! -f alembic.ini ]; then echo "alembic.ini not found"; fi
        working-directory: .

      - name: Install dependencies with uv
        run: |
          uv sync --frozen || (echo "uv sync failed, installing minimal deps" && uv pip install alembic sqlmodel psycopg2-binary)
        working-directory: .

      - name: Initialize database schema
        run: |
          until psql "$DATABASE_URL" -c '\l'; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          alembic init alembic || true
        env:
          PYTHONPATH: .

      - name: Generate Alembic migration
        run: |
          alembic revision --autogenerate -m "Auto-generated migration for model changes"
        env:
          SQLALCHEMY_URL: ${{ env.DATABASE_URL }}
          PYTHONPATH: .

      - name: Apply migrations
        run: |
          alembic upgrade head
        env:
          SQLALCHEMY_URL: ${{ env.DATABASE_URL }}
          PYTHONPATH: .

      - name: Check for uncommitted migrations
        id: check_migrations
        run: |
          if git diff --name-only | grep '^alembic/versions/'; then
            echo "New migration files detected"
            echo "has_migrations=true" >> $GITHUB_OUTPUT
          else
            echo "No new migration files"
            echo "has_migrations=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit new migration files
        if: steps.check_migrations.outputs.has_migrations == 'true' && github.event_name == 'push'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add alembic/versions/*
          git commit -m "Add auto-generated Alembic migration"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}