name: Alembic Migrations

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'app/models/**'
      - 'alembic.ini'
      - 'alembic/**'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_call:
    inputs:
      postgres_user:
        required: true
        type: string
      postgres_password:
        required: true
        type: string
      postgres_db:
        required: true
        type: string

jobs:
  alembic-migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ inputs.postgres_user }}
          POSTGRES_PASSWORD: ${{ inputs.postgres_password }}
          POSTGRES_DB: ${{ inputs.postgres_db }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://${{ inputs.postgres_user }}:${{ inputs.postgres_password }}@postgres:5432/${{ inputs.postgres_db }}
      PROJECT_NAME: dev-thedataproxy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          docker build -t ${PROJECT_NAME}-backend:latest ./backend

      - name: Debug inputs and prepare Alembic configuration
        run: |
          docker run --rm \
            --network host \
            -v /home/runner/work/platform-thedataproxy.com/platform-thedataproxy.com:/app \
            ${PROJECT_NAME}-backend:latest \
            bash -c "echo 'Debug: POSTGRES_USER=${{ inputs.postgres_user }}' && \
                     echo 'Debug: POSTGRES_PASSWORD=${{ inputs.postgres_password }}' && \
                     echo 'Debug: POSTGRES_DB=${{ inputs.postgres_db }}' && \
                     printf '[alembic]\nscript_location = app/alembic\nsqlalchemy.url = ${DATABASE_URL}\n' > /app/alembic.ini && \
                     mkdir -p /app/app/alembic/versions && \
                     cat > /app/app/alembic/env.py << 'EOF'
import os
from alembic import context
from app.models import SQLModel
from app.core.config import settings

target_metadata = SQLModel.metadata

def get_url():
    return str(settings.SQLALCHEMY_DATABASE_URI)

def run_migrations_offline() -> None:
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    from sqlalchemy import create_engine
    connectable = create_engine(get_url())
    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
        )
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
EOF
                     echo 'Listing /app contents:' && ls -la /app && \
                     echo 'Listing /app/app/alembic contents:' && ls -la /app/app/alembic && \
                     echo 'Content of alembic.ini:' && cat /app/alembic.ini"

      - name: Run migrations in container
        run: |
          docker run --rm \
            --network host \
            -e SQLALCHEMY_URL="${DATABASE_URL}" \
            -v /home/runner/work/platform-thedataproxy.com/platform-thedataproxy.com:/app \
            ${PROJECT_NAME}-backend:latest \
            bash -c "if ! command -v alembic >/dev/null 2>&1; then pip install alembic; fi && \
                     cat /app/alembic.ini && \
                     alembic revision --autogenerate -m 'Auto-generated migration for model changes'"

      - name: Check for uncommitted migrations
        id: check_migrations
        run: |
          if git diff --name-only | grep '^app/alembic/versions/'; then
            echo "New migration files detected"
            echo "has_migrations=true" >> $GITHUB_OUTPUT
          else
            echo "No new migration files"
            echo "has_migrations=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit new migration files
        if: steps.check_migrations.outputs.has_migrations == 'true' && github.event_name == 'push'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add app/alembic/versions/*
          git commit -m "Add auto-generated Alembic migration"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}