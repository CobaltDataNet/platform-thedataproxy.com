name: Alembic Migrations

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'app/models/**'
      - 'alembic.ini'
      - 'alembic/**'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_call:

jobs:
  alembic-migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}
      PROJECT_NAME: dev-thedataproxy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          docker build -t ${PROJECT_NAME}-backend:latest ./backend

      - name: Start database and wait
        run: |
          docker compose -f docker-compose.yml --project-name ${PROJECT_NAME} up -d db
          until docker exec ${PROJECT_NAME}-db-1 pg_isready -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }}; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
          docker exec ${PROJECT_NAME}-db-1 psql -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c 'SELECT 1;'

      - name: Run migrations in container
        run: |
          docker run --rm \
            --network ${PROJECT_NAME}_default \
            -e SQLALCHEMY_URL="${DATABASE_URL}" \
            -v $(/home/runner/work/platform-***.com/platform-***.com):/app \
            ${PROJECT_NAME}-backend:latest \
            bash -c "alembic revision --autogenerate -m 'Auto-generated migration for model changes' && alembic upgrade head"

      - name: Check for uncommitted migrations
        id: check_migrations
        run: |
          if git diff --name-only | grep '^alembic/versions/'; then
            echo "New migration files detected"
            echo "has_migrations=true" >> $GITHUB_OUTPUT
          else
            echo "No new migration files"
            echo "has_migrations=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit new migration files
        if: steps.check_migrations.outputs.has_migrations == 'true' && github.event_name == 'push'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add alembic/versions/*
          git commit -m "Add auto-generated Alembic migration"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}