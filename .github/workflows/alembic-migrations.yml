name: Alembic Migrations

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'app/models/**'
      - 'alembic.ini'
      - 'alembic/**'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_call:
    inputs:
      postgres_user:
        required: true
        type: string
      postgres_password:
        required: true
        type: string
      postgres_db:
        required: true
        type: string

jobs:
  alembic-migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ inputs.postgres_user || 'postgres' }}
          POSTGRES_PASSWORD: ${{ inputs.postgres_password || 'password' }}
          POSTGRES_DB: ${{ inputs.postgres_db || 'app_db' }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      DATABASE_URL: postgresql://${{ inputs.postgres_user || 'postgres' }}:${{ inputs.postgres_password || 'password' }}@postgres:5432/${{ inputs.postgres_db || 'app_db' }}
      PROJECT_NAME: dev-thedataproxy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug workflow file
        run: cat .github/workflows/alembic-migrations.yml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: docker build -t ${{ env.PROJECT_NAME }}-backend:latest ./backend

      - name: Debug inputs and prepare Alembic configuration
        run: |
          docker run --rm \
            --network host \
            -v $(pwd):/app \
            ${{ env.PROJECT_NAME }}-backend:latest \
            bash -c "echo 'Debug: POSTGRES_USER=${{ inputs.postgres_user || 'postgres' }}' && \
                     echo 'Debug: POSTGRES_PASSWORD=${{ inputs.postgres_password || 'password' }}' && \
                     echo 'Debug: POSTGRES_DB=${{ inputs.postgres_db || 'app_db' }}' && \
                     printf '[alembic]\nscript_location = app/alembic\nsqlalchemy.url = ${{ env.DATABASE_URL }}\n' > /app/alembic.ini && \
                     mkdir -p /app/app/alembic/versions && \
                     echo -e 'import os\nfrom alembic import context\nfrom app.models import SQLModel\nfrom app.core.config import settings\n\ntarget_metadata = SQLModel.metadata\n\ndef get_url():\n    return str(settings.SQLALCHEMY_DATABASE_URI)\n\ndef run_migrations_offline() -> None:\n    url = get_url()\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        compare_type=True,\n    )\n    with context.begin_transaction():\n        context.run_migrations()\n\ndef run_migrations_online() -> None:\n    from sqlalchemy import create_engine\n    connectable = create_engine(get_url())\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata,\n            compare_type=True,\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()' > /app/app/alembic/env.py && \
                     echo 'Listing /app contents:' && ls -la /app && \
                     echo 'Listing /app/app/alembic contents:' && ls -la /app/app/alembic && \
                     echo 'Content of alembic.ini:' && cat /app/alembic.ini"

      - name: Run migrations in container
        run: |
          docker run --rm \
            --network host \
            -e SQLALCHEMY_URL="${{ env.DATABASE_URL }}" \
            -v $(pwd):/app \
            ${{ env.PROJECT_NAME }}-backend:latest \
            bash -c "if ! command -v alembic >/dev/null 2>&1; then pip install alembic; fi && \
                     cat /app/alembic.ini && \
                     alembic revision --autogenerate -m 'Auto-generated migration for model changes'"

      - name: Check for uncommitted migrations
        id: check_migrations
        run: |
          if git diff --name-only | grep '^app/alembic/versions/'; then
            echo "New migration files detected"
            echo "has_migrations=true" >> $GITHUB_OUTPUT
          else
            echo "No new migration files"
            echo "has_migrations=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit new migration files
        if: steps.check_migrations.outputs.has_migrations == 'true' && github.event_name == 'push'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add app/alembic/versions/*
          git commit -m "Add auto-generated Alembic migration"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}